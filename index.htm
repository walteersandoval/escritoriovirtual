<!DOCTYPE html>
<html lang="es">
<head>
    <!-- Metadatos -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Oficina Virtual</title>
    <!-- Importar Font Awesome para los íconos -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <!-- Importar la fuente Montserrat desde Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        /* Estilos Generales */
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Montserrat', sans-serif;
        }
        body {
            background-color: #1e1e2f;
            color: #fff;
            display: flex;
            height: 100vh;
            margin: 0;
            overflow: hidden;
        }
        /* Dashboard (Menú) */
        .dashboard {
            width: 300px;
            background-color: #252539;
            padding: 20px;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            transition: width 0.3s;
            position: relative;
        }
        .dashboard.collapsed {
            width: 80px;
        }
        .toggle-menu {
            position: absolute;
            top: 10px;
            right: -25px;
            background-color: #252539;
            border: 1px solid #3a3a4f;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            color: #fff;
            transition: transform 0.3s;
        }
        .dashboard.collapsed .toggle-menu {
            transform: rotate(180deg);
        }
        .logo {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 20px;
            transition: opacity 0.3s;
        }
        .dashboard.collapsed .logo {
            opacity: 0;
            pointer-events: none;
        }
        .logo img {
            max-width: 150px;
            height: auto;
        }
        .search-bar {
            background-color: #1e1e2f;
            border: 1px solid #3a3a4f;
            border-radius: 8px;
            padding: 5px 10px;
            display: flex;
            align-items: center;
            margin-bottom: 30px;
            transition: opacity 0.3s;
        }
        .dashboard.collapsed .search-bar {
            opacity: 0;
            pointer-events: none;
        }
        .search-bar input {
            background: none;
            border: none;
            color: #fff;
            font-size: 14px;
            outline: none;
            width: 100%;
            margin-left: 5px;
        }
        .search-bar i {
            color: #9a9ab0;
            font-size: 14px;
        }
        .menu {
            list-style: none;
            flex-grow: 1;
            overflow-y: auto;
            padding-right: 10px; /* Espacio para scrollbar si es necesario */
            scrollbar-width: none; /* Firefox */
            -ms-overflow-style: none; /* IE y Edge */
        }
        .menu::-webkit-scrollbar {
            display: none; /* Chrome, Safari y Opera */
        }
        .menu-item {
            margin-bottom: 25px;
            display: flex;
            align-items: center;
            cursor: pointer;
            transition: background 0.3s;
            padding: 10px;
            border-radius: 8px;
            position: relative;
        }
        .menu-item:hover {
            background-color: #33334d;
        }
        .menu-item i {
            margin-right: 15px;
            font-size: 18px;
            color: #9a9ab0;
            min-width: 20px;
            text-align: center;
        }
        .menu-item span {
            font-size: 16px;
            font-weight: 500;
            color: #e0e0eb;
            transition: opacity 0.3s;
        }
        .dashboard.collapsed .menu-item span {
            opacity: 0;
            pointer-events: none;
        }
        .delete-section {
            position: absolute;
            top: 5px;
            right: 5px;
            font-size: 14px;
            color: #ff6b6b;
            cursor: pointer;
            display: none;
        }
        /* Mostrar ícono de eliminar cuando la eliminación está activada */
        .enable-section-deletion .menu-item.deletable .delete-section {
            display: block;
        }
        .notification {
            font-size: 14px;
            background-color: #2e2e49;
            padding: 15px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            cursor: pointer;
            transition: background 0.3s, opacity 0.3s;
            margin-bottom: 20px;
        }
        .notification:hover {
            background-color: #3b3b59;
        }
        .notification span {
            font-size: 14px;
            font-weight: 500;
            color: #fff;
            transition: opacity 0.3s;
        }
        .dashboard.collapsed .notification span {
            display: none;
        }
        .notification i {
            font-size: 18px;
            color: #00d1b2;
            margin: 16px;
        }
        .discover-more {
            font-size: 14px;
            font-weight: bold;
            color: #00d1b2;
            text-decoration: none;
            transition: color 0.3s;
        }
        .discover-more:hover {
            color: #00bfa5;
        }
        .footer {
            font-size: 12px;
            cursor: pointer;
            color: #9a9ab0;
            text-align: center;
            transition: opacity 0.3s;
        }
        .dashboard.collapsed .footer {
            opacity: 0;
            pointer-events: none;
        }
        /* Botón para agregar secciones */
        .add-section-btn {
            display: flex;
            align-items: center;
            cursor: pointer;
            transition: background 0.3s, opacity 0.3s;
            padding: 10px;
            border-radius: 8px;
            margin-top: 20px;
        }
        .add-section-btn:hover {
            background-color: #33334d;
        }
        .add-section-btn i {
            margin-right: 15px;
            font-size: 18px;
            color: #9a9ab0;
        }
        .add-section-btn span {
            font-size: 16px;
            font-weight: 500;
            color: #e0e0eb;
            transition: opacity 0.3s;
        }
        .dashboard.collapsed .add-section-btn span {
            opacity: 0;
            pointer-events: none;
        }
        /* Botón para configuración del dashboard */
        .settings-btn {
            display: flex;
            align-items: center;
            cursor: pointer;
            transition: background 0.3s, opacity 0.3s;
            padding: 10px;
            border-radius: 8px;
            margin-top: 20px;
        }
        .settings-btn:hover {
            background-color: #33334d;
        }
        .settings-btn i {
            margin-right: 15px;
            font-size: 18px;
            color: #9a9ab0;
        }
        .settings-btn span {
            font-size: 16px;
            font-weight: 500;
            color: #e0e0eb;
            transition: opacity 0.3s;
        }
        .dashboard.collapsed .settings-btn span {
            opacity: 0;
            pointer-events: none;
        }
        /* Secciones */
        .sections-container {
            flex: 1;
            display: flex;
            flex-wrap: wrap;
            padding: 20px;
            background-color: #28293d;
            overflow-y: auto;
            position: relative;
        }
        .section {
            flex: 1 1 100%;
            padding: 20px;
            background-color: #28293d;
            overflow-y: auto;
            position: relative;
            min-height: 200px;
            margin-bottom: 20px;
            border-radius: 8px;
        }
        .add-icon {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 24px;
            cursor: pointer;
            color: #00d1b2;
        }
        .card {
            background-color: #2e2f45;
            border-radius: 10px;
            padding: 15px;
            width: 300px;
            color: #fff;
            position: absolute;
            display: flex;
            flex-direction: column;
            cursor: grab;
            user-select: none;
            transition: transform 0.1s ease, box-shadow 0.1s ease, opacity 0.1s ease;
        }
        .card.dragging {
            opacity: 0.8;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            transform: scale(1.02);
        }
        .card h3, .card p {
            margin: 5px 0;
            user-select: none;
        }
        .links {
            margin-top: 10px;
        }
        /* Estilos para los enlaces dentro de las tarjetas */
        .link-section {
            display: flex;
            align-items: center;
            background-color: #33334d;
            padding: 10px;
            border-radius: 8px;
            margin-bottom: 10px;
            cursor: pointer;
            transition: background 0.3s;
            position: relative;
        }
        .link-section:hover {
            background-color: #3b3b59;
        }
        .link-section img {
            width: 24px;
            height: 24px;
            margin-right: 10px;
            border-radius: 5px;
        }
        .link-section span {
            color: #fff; /* Texto de color blanco */
            font-size: 14px;
            font-weight: 500;
        }
        /* Estilos para el icono de eliminar en los enlaces */
        .link-delete-icon {
            display: none;
            margin-left: auto;
            color: #ff6b6b;
            cursor: pointer;
            font-size: 16px;
        }
        .card.edit-mode .link-delete-icon {
            display: inline;
        }
        .editable {
            outline: none;
            cursor: text;
        }
        .footer-container {
            margin-top: auto;
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }
        .icon {
            cursor: pointer;
            font-size: 18px;
            color: #9a9ab0;
            transition: color 0.3s;
        }
        .icon.active {
            color: #00d1b2;
        }
        .delete-card {
            font-size: 14px;
            color: #ff6b6b;
            cursor: pointer;
            display: none;
        }
        .card:hover .delete-card {
            display: block;
        }
        .menu-opciones {
            display: none;
            background-color: #3a3a4f;
            border-radius: 5px;
            padding: 10px;
            position: absolute;
            top: -60px;
            right: 10px;
            z-index: 1000;
        }
        .menu-opciones button {
            background: none;
            border: none;
            color: #fff;
            font-size: 14px;
            cursor: pointer;
            margin-bottom: 5px;
        }
        .menu-opciones button:hover {
            color: #00bfa5;
        }
        .image-link-thumbnail {
            width: 50px;
            height: 50px;
            object-fit: cover;
            cursor: pointer;
            margin-right: 10px;
            border-radius: 5px;
        }
        /* Modal para Agregar Sección */
        .modal {
            display: none; /* Oculto por defecto */
            position: fixed; /* Fijo en la pantalla */
            z-index: 2000; /* Por encima de otros elementos */
            left: 0;
            top: 0;
            width: 100%; /* Ancho completo */
            height: 100%; /* Alto completo */
            overflow: auto; /* Scroll si es necesario */
            background-color: rgba(0, 0, 0, 0.5); /* Fondo semitransparente */
        }
        .modal-content {
            background-color: #2e2f45;
            margin: 5% auto; /* Ajustado para permitir maximizar */
            padding: 20px;
            border: 1px solid #888;
            width: 80%; /* Ancho del modal */
            max-width: 800px;
            border-radius: 10px;
            color: #fff;
            position: relative;
            transition: all 0.3s ease;
        }
        .video-modal-content, .image-modal-content, .document-modal-content {
            width: 80%;
            max-width: 800px;
        }
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .modal-header h2 {
            margin: 0;
        }
        .close-modal {
            color: #aaa;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        .close-modal:hover,
        .close-modal:focus {
            color: #fff;
        }
        .maximize-modal {
            color: #aaa;
            font-size: 22px;
            font-weight: bold;
            cursor: pointer;
            margin-left: 10px;
        }
        .maximize-modal:hover,
        .maximize-modal:focus {
            color: #fff;
        }
        .open-link {
            color: #aaa;
            font-size: 22px;
            font-weight: bold;
            cursor: pointer;
            margin-left: 10px;
        }
        .open-link:hover,
        .open-link:focus {
            color: #fff;
        }
        .icon-selection {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 10px;
            max-height: 150px;
            overflow-y: auto;
        }
        .icon-option {
            font-size: 24px;
            cursor: pointer;
            padding: 5px;
            border: 2px solid transparent;
            border-radius: 5px;
            transition: border 0.3s, background-color 0.3s;
        }
        .icon-option.selected {
            border: 2px solid #00d1b2;
            background-color: #3a3a4f;
        }
        .modal-footer {
            margin-top: 20px;
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }
        .modal-footer button {
            padding: 8px 16px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
        }
        .modal-footer .cancel-btn {
            background-color: #aaa;
            color: #fff;
        }
        .modal-footer .add-btn {
            background-color: #00d1b2;
            color: #fff;
        }
        /* Modal para Reproducir Video */
        #videoModal .modal-content {
            background-color: #1e1e2f;
            width: 80%;
            max-width: 800px;
        }
        #videoModal .modal-body {
            position: relative;
            padding-top: 56.25%; /* 16:9 Aspect Ratio */
        }
        #videoModal.fullscreen .modal-body {
            padding-top: 0;
            height: calc(100% - 60px); /* Ajuste para cabecera */
        }
        #videoModal iframe,
        #videoModal video {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
        /* Modal para Visualizar Imagen */
        #imageModal .modal-content {
            background-color: #1e1e2f;
            width: 80%;
            max-width: 800px;
        }
        #imageModal.fullscreen .modal-body {
            height: calc(100% - 60px);
            display: flex;
            align-items: center;
            justify-content: center;
        }
        #imageModal .modal-body {
            text-align: center;
            padding: 20px;
        }
        #modalImage {
            max-width: 100%;
            max-height: 80vh;
            border-radius: 10px;
        }
        #imageModal.fullscreen #modalImage {
            max-height: 100%;
        }
        /* Modal para Visualizar Documento */
        #documentModal .modal-content {
            background-color: #1e1e2f;
            width: 100%;
        }
        #documentModal .modal-body {
            position: relative;
            padding-top: 56.25%; /* 16:9 Aspect Ratio */
        }
        #documentModal.fullscreen .modal-body {
            padding-top: 0;
            height: calc(100% - 60px); /* Ajuste para cabecera */
        }
        #documentModal iframe {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border: none;
        }
        /* Ajustes para pantalla completa */
        .modal.fullscreen .modal-content {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            width: 100%;
            height: 100%;
            max-width: none;
            margin: 0;
            border-radius: 0;
        }
        /* Modal de Configuración */
        #settingsModal .modal-content {
            background-color: #2e2f45;
            width: 80%;
            max-width: 600px;
        }
        #settingsModal .modal-body {
            padding: 20px;
        }
        #settingsModal .option {
            margin-bottom: 20px;
        }
        #settingsModal label {
            display: flex;
            align-items: center;
            cursor: pointer;
        }
        #settingsModal input[type="checkbox"] {
            margin-right: 10px;
        }
        #settingsModal .import-export-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
        }
        #settingsModal .import-export-buttons button {
            width: 48%;
        }
    </style>
</head>
<body>
    <div class="dashboard" id="dashboard">
        <div class="toggle-menu" onclick="toggleDashboardMenu()" aria-label="Alternar menú">
            <i class="fas fa-angle-double-left"></i>
        </div>
        <div class="logo">
            <img src="https://storage.builderall.com//franquias/2/6377743/editor-html/12099886.png" alt="Logotipo">
        </div>
        <div class="search-bar">
            <i class="fas fa-search"></i>
            <input type="text" placeholder="¿Qué quieres aprender?">
        </div>
        <ul class="menu" id="menu">
            <!-- Secciones Iniciales -->
            <!-- Las secciones se cargarán dinámicamente -->
        </ul>
        <div class="notification">
            <i class="fas fa-bell"></i>
            <span>Nos encantaría conocer tu opinión. Si tienes alguna pregunta o comentario, escríbenos a wookcom.com 👀</span>
        </div>
        <div class="footer">Cuéntanos tu opinión</div>
        <!-- Botón para agregar secciones -->
        <div class="add-section-btn" onclick="openAddSectionModal()" aria-label="Agregar sección">
            <i class="fas fa-plus"></i>
            <span>Agregar Sección</span>
        </div>
        <!-- Botón para configuración del dashboard -->
        <div class="settings-btn" onclick="openSettingsModal()" aria-label="Configuración">
            <i class="fas fa-cog"></i>
            <span>Configuración</span>
        </div>
    </div>

    <!-- Secciones Dinámicas -->
    <div class="sections-container" id="sections-container">
        <!-- Las secciones se cargarán dinámicamente -->
    </div>

    <!-- Modal para Agregar Sección -->
    <div id="addSectionModal" class="modal" aria-hidden="true">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Agregar Nueva Sección</h2>
                <span class="close-modal" onclick="closeAddSectionModal()" aria-label="Cerrar modal">&times;</span>
            </div>
            <div class="modal-body">
                <label for="sectionName">Nombre de la Sección:</label>
                <input type="text" id="sectionName" placeholder="Ingrese el nombre" style="width:100%; padding:8px; margin-top:5px; border-radius:5px; border:1px solid #3a3a4f; background-color:#1e1e2f; color:#fff;">
                <div style="margin-top:15px;">
                    <label>Selecciona un Ícono:</label>
                    <div class="icon-selection" id="iconSelection">
                        <!-- Opciones de íconos -->
                        <i class="fas fa-home icon-option" data-icon="fa-home"></i>
                        <i class="fas fa-route icon-option" data-icon="fa-route"></i>
                        <i class="fas fa-chart-line icon-option" data-icon="fa-chart-line"></i>
                        <i class="fas fa-comments icon-option" data-icon="fa-comments"></i>
                        <i class="fas fa-bell icon-option" data-icon="fa-bell"></i>
                        <i class="fas fa-briefcase icon-option" data-icon="fa-briefcase"></i>
                        <i class="fas fa-calendar icon-option" data-icon="fa-calendar"></i>
                        <i class="fas fa-book icon-option" data-icon="fa-book"></i>
                        <i class="fas fa-cog icon-option" data-icon="fa-cog"></i>
                        <i class="fas fa-user icon-option" data-icon="fa-user"></i>
                        <!-- Agrega más íconos según sea necesario -->
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="cancel-btn" onclick="closeAddSectionModal()">Cancelar</button>
                <button class="add-btn" onclick="addNewSection()">Agregar</button>
            </div>
        </div>
    </div>

    <!-- Modal para Reproducir Video -->
    <div id="videoModal" class="modal" aria-hidden="true">
        <div class="modal-content video-modal-content">
            <div class="modal-header">
                <h2>Reproduciendo Video</h2>
                <div>
                    <span class="open-link" onclick="openVideoLink()" title="Abrir en una nueva pestaña"><i class="fas fa-external-link-alt"></i></span>
                    <span class="maximize-modal" onclick="toggleFullscreen('videoModal')" title="Pantalla completa"><i class="fas fa-expand"></i></span>
                    <span class="close-modal" onclick="closeVideoModal()" aria-label="Cerrar modal">&times;</span>
                </div>
            </div>
            <div class="modal-body">
                <!-- Video Directo -->
                <video id="videoPlayer" controls>
                    <source id="videoSource" src="" type="">
                    Tu navegador no soporta la etiqueta de video.
                </video>
                <!-- Iframe para YouTube (se crea dinámicamente si es necesario) -->
            </div>
        </div>
    </div>

    <!-- Modal para Visualizar Imagen -->
    <div id="imageModal" class="modal" aria-hidden="true">
        <div class="modal-content image-modal-content">
            <div class="modal-header">
                <h2>Visualizando Imagen</h2>
                <div>
                    <span class="open-link" onclick="openImageLink()" title="Abrir en una nueva pestaña"><i class="fas fa-external-link-alt"></i></span>
                    <span class="maximize-modal" onclick="toggleFullscreen('imageModal')" title="Pantalla completa"><i class="fas fa-expand"></i></span>
                    <span class="close-modal" onclick="closeImageModal()" aria-label="Cerrar modal">&times;</span>
                </div>
            </div>
            <div class="modal-body">
                <img id="modalImage" src="" alt="Imagen">
            </div>
        </div>
    </div>

    <!-- Modal para Visualizar Documento -->
    <div id="documentModal" class="modal" aria-hidden="true">
        <div class="modal-content document-modal-content">
            <div class="modal-header">
                <h2>Visualizando Documento</h2>
                <div>
                    <span class="open-link" onclick="openDocumentLink()" title="Abrir en una nueva pestaña"><i class="fas fa-external-link-alt"></i></span>
                    <span class="maximize-modal" onclick="toggleFullscreen('documentModal')" title="Pantalla completa"><i class="fas fa-expand"></i></span>
                    <span class="close-modal" onclick="closeDocumentModal()" aria-label="Cerrar modal">&times;</span>
                </div>
            </div>
            <div class="modal-body">
                <iframe id="documentIframe" src="" frameborder="0"></iframe>
            </div>
        </div>
    </div>

    <!-- Modal de Configuración -->
    <div id="settingsModal" class="modal" aria-hidden="true">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Configuración del Dashboard</h2>
                <span class="close-modal" onclick="closeSettingsModal()" aria-label="Cerrar modal">&times;</span>
            </div>
            <div class="modal-body">
                <div class="option">
                    <label>
                        <input type="checkbox" id="enableSectionDeletion">
                        Activar eliminación de secciones
                    </label>
                </div>
                <div class="import-export-buttons">
                    <button onclick="exportDashboard()">Exportar Oficina Virtual</button>
                    <button onclick="document.getElementById('importFileInput').click()">Restaurar Oficina Virtual</button>
                    <input type="file" id="importFileInput" accept=".json" style="display: none;" onchange="importDashboard(event)">
                </div>
            </div>
        </div>
    </div>

    <script>
        // Variables globales
        let highestZ = 1;
        const gridSize = 10;
        let sectionsData = JSON.parse(localStorage.getItem('sections')) || [];
        let cardsData = JSON.parse(localStorage.getItem('cards')) || {};
        let enableSectionDeletion = false;

        // Función para generar un ID único
        function generateUniqueId() {
            return 'card-' + Date.now() + '-' + Math.floor(Math.random() * 1000);
        }

        // Predefinir las secciones iniciales si no existen
        if (sectionsData.length === 0) {
            sectionsData = [
                { id: 'inicio', name: 'Inicio', icon: 'fa-home', deletable: false },
                { id: 'rutas', name: 'Tareas', icon: 'fa-route', deletable: false },
                { id: 'progreso', name: 'Documentos', icon: 'fa-chart-line', deletable: false },
                { id: 'chat', name: 'Ideas', icon: 'fa-comments', deletable: false },
                { id: 'notificaciones', name: 'Notificaciones', icon: 'fa-bell', deletable: false }
            ];
            localStorage.setItem('sections', JSON.stringify(sectionsData));
        }

        // Mostrar las secciones en el menú y crear sus contenedores
        function initializeSections() {
            const menu = document.getElementById('menu');
            menu.innerHTML = ''; // Limpiar menú existente
            const sectionsContainer = document.getElementById('sections-container');
            sectionsContainer.innerHTML = ''; // Limpiar secciones existentes

            sectionsData.forEach(section => {
                // Agregar al menú
                const menuItem = document.createElement('li');
                menuItem.className = 'menu-item';
                menuItem.setAttribute('data-section-id', section.id);
                menuItem.onclick = () => showSection(section.id);
                menuItem.innerHTML = `
                    <i class="fas ${section.icon}"></i>
                    <span>${section.name}</span>
                `;

                if (section.deletable) {
                    menuItem.classList.add('deletable');
                    // Añadir ícono de eliminar siempre
                    const deleteIcon = document.createElement('i');
                    deleteIcon.className = 'fas fa-trash-alt delete-section';
                    deleteIcon.title = 'Eliminar sección';
                    deleteIcon.onclick = (event) => {
                        event.stopPropagation(); // Evitar que se active la selección de la sección
                        deleteSection(section.id);
                    };
                    menuItem.appendChild(deleteIcon);
                }

                menu.appendChild(menuItem);

                // Crear la sección en el contenedor
                const sectionDiv = document.createElement('div');
                sectionDiv.className = 'section';
                sectionDiv.id = section.id;
                sectionDiv.setAttribute('aria-labelledby', `${section.id}-title`);
                sectionDiv.innerHTML = `
                    <h2 class="section-title" id="${section.id}-title">${section.name}</h2>
                    <i class="fas fa-plus add-icon" onclick="addCard('${section.id}')" aria-label="Agregar tarjeta"></i>
                `;
                sectionsContainer.appendChild(sectionDiv);
            });
        }

        // Mostrar la sección seleccionada
        function showSection(sectionId) {
            const sections = document.querySelectorAll('.section');
            sections.forEach(section => section.style.display = 'none');
            document.getElementById(sectionId).style.display = 'block';
        }

        // Inicializar las secciones al cargar
        initializeSections();
        showSection(sectionsData[0].id); // Mostrar la primera sección por defecto

        // Cargar tarjetas guardadas al inicio
        document.addEventListener('DOMContentLoaded', () => {
            loadCards();
            // Agregar evento delegación para enlaces de video, imagen y documento
            document.body.addEventListener('click', handleLinkClick);
        });

        // Función para cargar tarjetas desde localStorage
        function loadCards() {
            sectionsData.forEach(section => {
                const sectionElement = document.getElementById(section.id);
                if (sectionElement) {
                    // Limpiar tarjetas existentes en la sección
                    const existingCards = sectionElement.querySelectorAll('.card');
                    existingCards.forEach(card => card.remove());
                }

                const savedCards = cardsData[section.id] || [];
                savedCards.forEach(savedCard => {
                    createCard(section.id, savedCard);
                });
            });
        }

        // Función para agregar una nueva tarjeta
        function addCard(sectionId) {
            const cardTitle = prompt("Ingrese el nombre del contenedor:");
            if (!cardTitle) return;

            const uniqueId = generateUniqueId();
            const newCard = {
                id: uniqueId,
                title: cardTitle,
                description: "Descripción del contenedor.",
                left: "10px",
                top: "10px",
                links: ""
            };

            // Agregar la tarjeta al cardsData
            if (!cardsData[sectionId]) {
                cardsData[sectionId] = [];
            }
            cardsData[sectionId].push(newCard);
            saveCards();

            // Crear la tarjeta en el DOM
            createCard(sectionId, newCard);
        }

        // Función para crear una tarjeta
        function createCard(sectionId, cardData) {
            const section = document.getElementById(sectionId);
            const card = document.createElement('div');
            card.className = 'card';
            card.setAttribute('tabindex', '0');
            card.setAttribute('aria-grabbed', 'false');
            card.setAttribute('data-card-id', cardData.id); // Asignar ID único
            card.innerHTML = `
                <h3 class="editable" contenteditable="false">${cardData.title}</h3>
                <p class="editable" contenteditable="false">${cardData.description}</p>
                <div class="links">${cardData.links}</div>
                <div class="footer-container">
                    <i class="fas fa-pen icon" onclick="toggleEdit(this)" aria-label="Editar tarjeta"></i>
                    <i class="fas fa-plus icon" onclick="toggleCardMenu(this)" aria-label="Agregar opción"></i>
                    <i class="fas fa-trash-alt delete-card" onclick="deleteCard(this)" aria-label="Eliminar tarjeta"></i>
                </div>
                <div class="menu-opciones">
                    <button onclick="addLink(this)">Agregar Enlace</button>
                </div>
            `;
            card.style.left = cardData.left;
            card.style.top = cardData.top;
            section.appendChild(card);

            // Procesar enlaces para agregar íconos de eliminar y eventos
            processLinks(card);

            // Añadir eventos de arrastre
            makeDraggable(card, section);

            // Habilitar edición en título y descripción
            enableCardEditing(card, sectionId, cardData.id);
        }

        // Función para procesar enlaces y agregar íconos de eliminar
        function processLinks(card) {
            const linksContainer = card.querySelector('.links');
            const linkSections = linksContainer.querySelectorAll('.link-section');

            linkSections.forEach(linkSection => {
                // Verificar si ya tiene el ícono de eliminar
                let deleteIcon = linkSection.querySelector('.link-delete-icon');
                if (!deleteIcon) {
                    // Crear ícono de eliminar
                    deleteIcon = document.createElement('i');
                    deleteIcon.className = 'fas fa-trash-alt link-delete-icon';
                    deleteIcon.title = 'Eliminar enlace';
                    linkSection.appendChild(deleteIcon);

                    // Agregar evento de clic para eliminar
                    deleteIcon.addEventListener('click', (e) => {
                        e.stopPropagation(); // Evitar que se active el enlace
                        deleteLink(linkSection);
                    });
                }
            });
        }

        // Función para eliminar un enlace
        function deleteLink(linkSection) {
            if (confirm("¿Estás seguro de que deseas eliminar este enlace?")) {
                const card = linkSection.closest('.card');
                linkSection.remove();
                saveLinkData(card);
            }
        }

        // Función para habilitar la edición de tarjetas
        function enableCardEditing(card, sectionId, cardId) {
            const editableElements = card.querySelectorAll('.editable');

            editableElements.forEach(element => {
                element.addEventListener('blur', () => {
                    const newValue = element.textContent.trim();
                    if (element.tagName.toLowerCase() === 'h3') {
                        updateCardData(sectionId, cardId, 'title', newValue);
                    } else if (element.tagName.toLowerCase() === 'p') {
                        updateCardData(sectionId, cardId, 'description', newValue);
                    }
                });

                // Permitir la edición al hacer doble clic
                element.addEventListener('dblclick', () => {
                    element.contentEditable = true;
                    element.focus();
                });

                // Deshabilitar la edición al presionar Enter
                element.addEventListener('keydown', (e) => {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        element.contentEditable = false;
                    }
                });
            });
        }

        function updateCardData(sectionId, cardId, field, value) {
            const sectionCards = cardsData[sectionId];
            if (sectionCards) {
                const card = sectionCards.find(c => c.id === cardId);
                if (card) {
                    card[field] = value;
                    saveCards();
                }
            }
        }

        // Función para hacer una tarjeta arrastrable
        function makeDraggable(card, section) {
            let offsetX, offsetY;
            let isDragging = false;
            let animationFrameId;
            let currentX = parseInt(card.style.left, 10) || 0;
            let currentY = parseInt(card.style.top, 10) || 0;

            // Evitar que los clics en iconos inicien el arrastre
            const icons = card.querySelectorAll('.icon');
            icons.forEach(icon => {
                icon.addEventListener('mousedown', (event) => {
                    event.stopPropagation();
                });
                icon.addEventListener('touchstart', (event) => {
                    event.stopPropagation();
                });
            });

            // Eventos de mouse
            card.addEventListener('mousedown', (event) => {
                isDragging = true;
                offsetX = event.clientX - card.getBoundingClientRect().left;
                offsetY = event.clientY - card.getBoundingClientRect().top;
                card.style.cursor = 'grabbing';
                card.classList.add('dragging');
                highestZ += 1;
                card.style.zIndex = highestZ;
                card.setAttribute('aria-grabbed', 'true');

                document.addEventListener('mousemove', moveCard);
                document.addEventListener('mouseup', stopDragging);

                event.preventDefault(); // Evita la selección de texto al arrastrar
            });

            // Eventos táctiles
            card.addEventListener('touchstart', (event) => {
                isDragging = true;
                const touch = event.touches[0];
                offsetX = touch.clientX - card.getBoundingClientRect().left;
                offsetY = touch.clientY - card.getBoundingClientRect().top;
                card.style.cursor = 'grabbing';
                card.classList.add('dragging');
                highestZ += 1;
                card.style.zIndex = highestZ;
                card.setAttribute('aria-grabbed', 'true');

                document.addEventListener('touchmove', moveCardTouch, { passive: false });
                document.addEventListener('touchend', stopDraggingTouch);

                event.preventDefault();
            });

            // Función para mover la tarjeta con mouse
            function moveCard(event) {
                if (!isDragging) return;
                currentX = event.clientX - offsetX - section.getBoundingClientRect().left;
                currentY = event.clientY - offsetY - section.getBoundingClientRect().top;

                // Snapping a la cuadrícula
                currentX = Math.round(currentX / gridSize) * gridSize;
                currentY = Math.round(currentY / gridSize) * gridSize;

                // Limitar dentro del contenedor
                const relativeWidth = section.clientWidth;
                const relativeHeight = section.clientHeight;

                currentX = Math.max(0, Math.min(currentX, relativeWidth - card.offsetWidth));
                currentY = Math.max(0, Math.min(currentY, relativeHeight - card.offsetHeight));

                // Usar requestAnimationFrame para optimizar
                if (animationFrameId) {
                    cancelAnimationFrame(animationFrameId);
                }
                animationFrameId = requestAnimationFrame(() => {
                    card.style.left = `${currentX}px`;
                    card.style.top = `${currentY}px`;
                });
            }

            // Función para mover la tarjeta con touch
            function moveCardTouch(event) {
                if (!isDragging) return;
                const touch = event.touches[0];
                currentX = touch.clientX - offsetX - section.getBoundingClientRect().left;
                currentY = touch.clientY - offsetY - section.getBoundingClientRect().top;

                // Snapping a la cuadrícula
                currentX = Math.round(currentX / gridSize) * gridSize;
                currentY = Math.round(currentY / gridSize) * gridSize;

                // Limitar dentro del contenedor
                const relativeWidth = section.clientWidth;
                const relativeHeight = section.clientHeight;

                currentX = Math.max(0, Math.min(currentX, relativeWidth - card.offsetWidth));
                currentY = Math.max(0, Math.min(currentY, relativeHeight - card.offsetHeight));

                // Usar requestAnimationFrame para optimizar
                if (animationFrameId) {
                    cancelAnimationFrame(animationFrameId);
                }
                animationFrameId = requestAnimationFrame(() => {
                    card.style.left = `${currentX}px`;
                    card.style.top = `${currentY}px`;
                });

                event.preventDefault();
            }

            // Función para detener el arrastre con mouse
            function stopDragging(event) {
                if (!isDragging) return;
                isDragging = false;
                card.style.cursor = 'grab';
                card.classList.remove('dragging');
                card.setAttribute('aria-grabbed', 'false');

                document.removeEventListener('mousemove', moveCard);
                document.removeEventListener('mouseup', stopDragging);

                cancelAnimationFrame(animationFrameId);

                // Actualizar posición en cardsData
                const cardId = card.getAttribute('data-card-id');
                updateCardPosition(section.id, cardId, currentX + 'px', currentY + 'px');

                saveCards();
            }

            // Función para detener el arrastre con touch
            function stopDraggingTouch(event) {
                if (!isDragging) return;
                isDragging = false;
                card.style.cursor = 'grab';
                card.classList.remove('dragging');
                card.setAttribute('aria-grabbed', 'false');

                document.removeEventListener('touchmove', moveCardTouch);
                document.removeEventListener('touchend', stopDraggingTouch);

                cancelAnimationFrame(animationFrameId);

                // Actualizar posición en cardsData
                const cardId = card.getAttribute('data-card-id');
                updateCardPosition(section.id, cardId, currentX + 'px', currentY + 'px');

                saveCards();
            }

            // Accesibilidad: permitir arrastrar con teclado
            card.addEventListener('keydown', (event) => {
                const step = gridSize; // Paso de movimiento con teclado
                switch(event.key) {
                    case 'ArrowUp':
                        event.preventDefault();
                        currentY = Math.max(currentY - step, 0);
                        card.style.top = `${currentY}px`;
                        updateCardPosition(section.id, card.getAttribute('data-card-id'), `${currentX}px`, `${currentY}px`);
                        saveCards();
                        break;
                    case 'ArrowDown':
                        event.preventDefault();
                        currentY = Math.min(currentY + step, section.clientHeight - card.offsetHeight);
                        card.style.top = `${currentY}px`;
                        updateCardPosition(section.id, card.getAttribute('data-card-id'), `${currentX}px`, `${currentY}px`);
                        saveCards();
                        break;
                    case 'ArrowLeft':
                        event.preventDefault();
                        currentX = Math.max(currentX - step, 0);
                        card.style.left = `${currentX}px`;
                        updateCardPosition(section.id, card.getAttribute('data-card-id'), `${currentX}px`, `${currentY}px`);
                        saveCards();
                        break;
                    case 'ArrowRight':
                        event.preventDefault();
                        currentX = Math.min(currentX + step, section.clientWidth - card.offsetWidth);
                        card.style.left = `${currentX}px`;
                        updateCardPosition(section.id, card.getAttribute('data-card-id'), `${currentX}px`, `${currentY}px`);
                        saveCards();
                        break;
                    case 'Enter':
                        event.preventDefault();
                        // Iniciar edición al presionar Enter
                        toggleEdit(card.querySelector('.icon.fa-pen'));
                        break;
                }
            });
        }

        // Función para actualizar la posición de una tarjeta en cardsData
        function updateCardPosition(sectionId, cardId, left, top) {
            const sectionCards = cardsData[sectionId];
            if (sectionCards) {
                const card = sectionCards.find(c => c.id === cardId);
                if (card) {
                    card.left = left;
                    card.top = top;
                }
            }
        }

        // Función para alternar el menú principal
        function toggleDashboardMenu() {
            const dashboard = document.getElementById('dashboard');
            const toggleBtnIcon = dashboard.querySelector('.toggle-menu i');
            dashboard.classList.toggle('collapsed');
            if (dashboard.classList.contains('collapsed')) {
                toggleBtnIcon.classList.remove('fa-angle-double-left');
                toggleBtnIcon.classList.add('fa-angle-double-right');
            } else {
                toggleBtnIcon.classList.remove('fa-angle-double-right');
                toggleBtnIcon.classList.add('fa-angle-double-left');
            }
        }

        // Función para alternar el menú de opciones en las tarjetas
        function toggleCardMenu(icon) {
            const menu = icon.parentElement.nextElementSibling;
            const isActive = menu.style.display === 'block';
            menu.style.display = isActive ? 'none' : 'block';
            icon.classList.toggle('active', !isActive);
        }

        // Función para agregar un enlace a una tarjeta
        function addLink(button) {
            const linkUrl = prompt("Ingrese la URL del enlace:");
            const linkName = prompt("Ingrese el nombre del enlace:");
            if (!linkUrl || !linkName) return;

            try {
                const url = new URL(linkUrl);
                const hostname = url.hostname.toLowerCase();
                const pathname = url.pathname.toLowerCase();
                const extension = pathname.split('.').pop();
                const videoExtensions = ['mp4', 'webm', 'ogg'];
                const videoPlatforms = ['youtube.com', 'youtu.be', 'vimeo.com'];
                const imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'svg', 'webp'];
                const docExtensions = ['doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'pdf'];

                let isVideo = false;
                let videoType = ''; // 'direct' o 'youtube'
                let isImage = false;
                let isDocument = false;
                let isGoogleDrive = false;

                // Verificar si es video
                if (videoExtensions.includes(extension)) {
                    isVideo = true;
                    videoType = 'direct';
                } else if (videoPlatforms.some(platform => hostname === platform || hostname.endsWith('.' + platform))) {
                    isVideo = true;
                    videoType = 'youtube';
                } else if (imageExtensions.includes(extension)) {
                    isImage = true;
                } else if (docExtensions.includes(extension)) {
                    isDocument = true;
                }

                // Verificar si es un enlace de Google Drive
                if (hostname.includes('drive.google.com') || hostname.includes('docs.google.com')) {
                    isDocument = true;
                    isGoogleDrive = true;
                }

                let faviconUrl = `https://www.google.com/s2/favicons?domain=${hostname}`;
                let linkSection;

                if (isVideo) {
                    // Para enlaces de video
                    if (videoType === 'direct') {
                        linkSection = document.createElement('div');
                        linkSection.className = 'link-section';
                        linkSection.innerHTML = `
                            <img src="${faviconUrl}" alt="Favicon">
                            <span class="editable-link video-link" data-video-type="direct" data-video-url="${linkUrl}">${linkName}</span>
                            <i class="fas fa-trash-alt link-delete-icon" title="Eliminar enlace"></i>
                        `;
                        linkSection.onclick = () => openVideoModal('direct', linkUrl);
                    } else if (videoType === 'youtube') {
                        let videoId = '';
                        if (hostname === 'youtu.be') {
                            videoId = pathname.slice(1);
                        } else {
                            videoId = url.searchParams.get('v');
                        }
                        if (videoId) {
                            linkSection = document.createElement('div');
                            linkSection.className = 'link-section';
                            linkSection.innerHTML = `
                                <img src="${faviconUrl}" alt="Favicon">
                                <span class="editable-link video-link" data-video-type="youtube" data-video-id="${videoId}">${linkName}</span>
                                <i class="fas fa-trash-alt link-delete-icon" title="Eliminar enlace"></i>
                            `;
                            linkSection.onclick = () => openVideoModal('youtube', videoId);
                        } else {
                            // Enlace normal si no se puede extraer el ID
                            linkSection = document.createElement('div');
                            linkSection.className = 'link-section';
                            linkSection.innerHTML = `
                                <img src="${faviconUrl}" alt="Favicon">
                                <span class="editable-link">${linkName}</span>
                                <i class="fas fa-trash-alt link-delete-icon" title="Eliminar enlace"></i>
                            `;
                            linkSection.onclick = () => window.open(linkUrl, '_blank');
                        }
                    }
                } else if (isImage) {
                    // Para enlaces de imágenes
                    linkSection = document.createElement('div');
                    linkSection.className = 'link-section';
                    linkSection.innerHTML = `
                        <img src="${linkUrl}" alt="${linkName}">
                        <span class="editable-link image-link" data-image-url="${linkUrl}">${linkName}</span>
                        <i class="fas fa-trash-alt link-delete-icon" title="Eliminar enlace"></i>
                    `;
                    linkSection.onclick = () => openImageModal(linkUrl);
                } else if (isDocument) {
                    // Para enlaces de documentos
                    linkSection = document.createElement('div');
                    linkSection.className = 'link-section';
                    linkSection.innerHTML = `
                        <img src="${faviconUrl}" alt="Favicon">
                        <span class="editable-link document-link" data-document-url="${linkUrl}" data-google-drive="${isGoogleDrive}">${linkName}</span>
                        <i class="fas fa-trash-alt link-delete-icon" title="Eliminar enlace"></i>
                    `;
                    linkSection.onclick = () => openDocumentModal(linkUrl, isGoogleDrive);
                } else {
                    // Enlaces normales que se abren en una pestaña externa
                    linkSection = document.createElement('div');
                    linkSection.className = 'link-section';
                    linkSection.innerHTML = `
                        <img src="${faviconUrl}" alt="Favicon">
                        <span class="editable-link">${linkName}</span>
                        <i class="fas fa-trash-alt link-delete-icon" title="Eliminar enlace"></i>
                    `;
                    linkSection.onclick = () => window.open(linkUrl, '_blank');
                }

                // Agregar evento de eliminación al ícono
                const deleteIcon = linkSection.querySelector('.link-delete-icon');
                deleteIcon.addEventListener('click', (e) => {
                    e.stopPropagation();
                    deleteLink(linkSection);
                });

                const linksContainer = button.closest('.card').querySelector('.links');
                linksContainer.appendChild(linkSection);
                saveLinkData(button.closest('.card'));

            } catch (error) {
                alert("URL inválida. Por favor, ingrese una URL válida.");
            }
        }

        // Función para guardar los enlaces en cardsData
        function saveLinkData(card) {
            const sectionId = card.parentElement.id;
            const cardId = card.getAttribute('data-card-id');
            const linksHTML = card.querySelector('.links').innerHTML;

            const sectionCards = cardsData[sectionId];
            if (sectionCards) {
                const cardData = sectionCards.find(c => c.id === cardId);
                if (cardData) {
                    cardData.links = linksHTML;
                    saveCards();
                }
            }
        }

        // Función para alternar la edición de una tarjeta
        function toggleEdit(icon) {
            const card = icon.closest('.card');
            const elements = card.querySelectorAll('.editable');
            const isActive = icon.classList.contains('active');

            elements.forEach(element => {
                element.contentEditable = !isActive;
                if (!isActive) element.focus();
            });

            icon.classList.toggle('active', !isActive);

            if (!isActive) {
                // Entrando en modo edición
                card.classList.add('edit-mode');
            } else {
                // Saliendo del modo edición
                card.classList.remove('edit-mode');
            }

            saveCards();
        }

        // Función para eliminar una tarjeta
        function deleteCard(icon) {
            const card = icon.closest('.card');
            const sectionId = card.parentElement.id;
            const cardId = card.getAttribute('data-card-id');

            if (confirm("¿Estás seguro de que deseas eliminar esta tarjeta?")) {
                // Eliminar la tarjeta del DOM
                card.remove();

                // Eliminar la tarjeta de cardsData
                if (cardsData[sectionId]) {
                    const cardIndex = cardsData[sectionId].findIndex(c => c.id === cardId);
                    if (cardIndex !== -1) {
                        cardsData[sectionId].splice(cardIndex, 1);
                        if (cardsData[sectionId].length === 0) {
                            delete cardsData[sectionId];
                        }
                        saveCards();
                    }
                }
            }
        }

        // Función para eliminar una sección
        function deleteSection(sectionId) {
            if (confirm("¿Estás seguro de que deseas eliminar esta sección? Todas las tarjetas asociadas también serán eliminadas.")) {
                // Eliminar la sección del DOM
                const sectionDiv = document.getElementById(sectionId);
                if (sectionDiv) sectionDiv.remove();

                // Eliminar la sección del menú
                const menuItem = document.querySelector(`.menu-item[data-section-id="${sectionId}"]`);
                if (menuItem) menuItem.remove();

                // Eliminar la sección de sectionsData
                sectionsData = sectionsData.filter(section => section.id !== sectionId);
                localStorage.setItem('sections', JSON.stringify(sectionsData));

                // Eliminar las tarjetas asociadas de cardsData
                if (cardsData[sectionId]) {
                    delete cardsData[sectionId];
                    saveCards();
                }
            }
        }

        // Función para guardar el estado de las tarjetas y secciones en localStorage
        function saveCards() {
            localStorage.setItem('cards', JSON.stringify(cardsData));
        }

        // Función para abrir el modal de agregar sección
        function openAddSectionModal() {
            document.getElementById('addSectionModal').style.display = 'block';
            document.getElementById('addSectionModal').setAttribute('aria-hidden', 'false');
        }

        // Función para cerrar el modal de agregar sección
        function closeAddSectionModal() {
            document.getElementById('addSectionModal').style.display = 'none';
            document.getElementById('addSectionModal').setAttribute('aria-hidden', 'true');
            document.getElementById('sectionName').value = '';
            const icons = document.querySelectorAll('.icon-option');
            icons.forEach(icon => icon.classList.remove('selected'));
        }

        // Función para seleccionar un ícono en el modal
        function selectIcon(event) {
            const selectedIcon = event.target;
            if (selectedIcon.classList.contains('icon-option')) {
                // Desmarcar otros íconos
                document.querySelectorAll('.icon-option').forEach(icon => icon.classList.remove('selected'));
                // Marcar el ícono seleccionado
                selectedIcon.classList.add('selected');
            }
        }

        // Agregar evento de clic a las opciones de íconos
        document.getElementById('iconSelection').addEventListener('click', selectIcon);

        // Función para agregar una nueva sección
        function addNewSection() {
            const sectionNameInput = document.getElementById('sectionName');
            const sectionName = sectionNameInput.value.trim();
            if (!sectionName) {
                alert("Por favor, ingrese el nombre de la sección.");
                return;
            }

            const selectedIconElement = document.querySelector('.icon-option.selected');
            if (!selectedIconElement) {
                alert("Por favor, seleccione un ícono para la sección.");
                return;
            }
            const iconClass = selectedIconElement.getAttribute('data-icon');

            // Crear un ID único para la nueva sección
            const newSectionId = sectionName.toLowerCase().replace(/\s+/g, '_') + '_' + Date.now();

            // Añadir la nueva sección a las seccionesData
            const newSection = { id: newSectionId, name: sectionName, icon: iconClass, deletable: true };
            sectionsData.push(newSection);
            localStorage.setItem('sections', JSON.stringify(sectionsData));

            // Actualizar las secciones
            initializeSections();
            loadCards(); // Cargar tarjetas si las hay

            // Cerrar el modal
            closeAddSectionModal();
        }

        // Cerrar el modal al hacer clic fuera del contenido
        window.onclick = function(event) {
            const addSectionModal = document.getElementById('addSectionModal');
            if (event.target == addSectionModal) {
                closeAddSectionModal();
            }

            const videoModal = document.getElementById('videoModal');
            if (event.target == videoModal) {
                closeVideoModal();
            }

            const imageModal = document.getElementById('imageModal');
            if (event.target == imageModal) {
                closeImageModal();
            }

            const documentModal = document.getElementById('documentModal');
            if (event.target == documentModal) {
                closeDocumentModal();
            }

            const settingsModal = document.getElementById('settingsModal');
            if (event.target == settingsModal) {
                closeSettingsModal();
            }
        }

        // Cerrar menús de opciones al hacer clic fuera
        document.addEventListener('click', (event) => {
            if (!event.target.closest('.menu-opciones') && !event.target.closest('.icon.fa-plus') && !event.target.closest('.icon.fa-trash-alt')) {
                document.querySelectorAll('.menu-opciones').forEach(menu => {
                    menu.style.display = 'none';
                });
                document.querySelectorAll('.icon.fa-plus').forEach(icon => {
                    icon.classList.remove('active');
                });
            }
        });

        // Función para manejar clics en enlaces
        function handleLinkClick(event) {
            const linkSection = event.target.closest('.link-section');
            if (linkSection) {
                event.stopPropagation(); // Evitar que el evento se propague
            }
        }

        // Función para abrir el modal de video
        function openVideoModal(type, identifier) {
            const videoModal = document.getElementById('videoModal');
            const videoPlayer = document.getElementById('videoPlayer');
            let iframe = document.getElementById('youtubeIframe');
            let contentUrl = ''; // Nueva variable para almacenar el enlace

            if (type === 'direct') {
                // Configurar video para enlaces directos
                videoPlayer.style.display = 'block';
                videoPlayer.src = identifier;
                videoPlayer.type = getVideoMimeType(identifier);
                videoPlayer.load();

                contentUrl = identifier;

                // Ocultar iframe si existe
                if (iframe) {
                    iframe.style.display = 'none';
                }
            } else if (type === 'youtube') {
                // Configurar iframe para YouTube
                videoPlayer.style.display = 'none'; // Ocultar el elemento video

                // Crear o actualizar un iframe para YouTube
                if (!iframe) {
                    iframe = document.createElement('iframe');
                    iframe.id = 'youtubeIframe';
                    iframe.width = '100%';
                    iframe.height = '100%';
                    iframe.frameBorder = '0';
                    iframe.allow = 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture';
                    iframe.allowFullscreen = true;
                    document.querySelector('#videoModal .modal-body').appendChild(iframe);
                }
                iframe.src = `https://www.youtube.com/embed/${identifier}?autoplay=1`;
                iframe.style.display = 'block';

                contentUrl = `https://www.youtube.com/watch?v=${identifier}`;
            }

            videoModal.style.display = 'block';
            videoModal.setAttribute('aria-hidden', 'false');

            // Almacenar el enlace en un atributo data
            videoModal.setAttribute('data-content-url', contentUrl);
        }

        // Función para cerrar el modal de video
        function closeVideoModal() {
            const videoModal = document.getElementById('videoModal');
            const videoPlayer = document.getElementById('videoPlayer');
            const iframe = document.getElementById('youtubeIframe');

            // Pausar el video si es directo
            if (videoPlayer.src) {
                videoPlayer.pause();
                videoPlayer.src = '';
            }

            // Detener el iframe de YouTube
            if (iframe && iframe.src) {
                iframe.src = '';
            }

            videoModal.style.display = 'none';
            videoModal.setAttribute('aria-hidden', 'true');
            videoModal.classList.remove('fullscreen');
        }

        // Función para obtener el tipo MIME del video basado en su extensión
        function getVideoMimeType(url) {
            const extension = url.split('.').pop().toLowerCase();
            switch (extension) {
                case 'mp4':
                    return 'video/mp4';
                case 'webm':
                    return 'video/webm';
                case 'ogg':
                    return 'video/ogg';
                default:
                    return 'video/mp4'; // Valor por defecto
            }
        }

        // Función para abrir el modal de imagen
        function openImageModal(imageUrl) {
            const imageModal = document.getElementById('imageModal');
            const modalImage = document.getElementById('modalImage');
            modalImage.src = imageUrl;
            imageModal.style.display = 'block';
            imageModal.setAttribute('aria-hidden', 'false');

            // Almacenar el enlace en un atributo data
            imageModal.setAttribute('data-content-url', imageUrl);
        }

        // Función para cerrar el modal de imagen
        function closeImageModal() {
            const imageModal = document.getElementById('imageModal');
            const modalImage = document.getElementById('modalImage');
            modalImage.src = '';
            imageModal.style.display = 'none';
            imageModal.setAttribute('aria-hidden', 'true');
            imageModal.classList.remove('fullscreen');
        }

        // Función para abrir el modal de documento
        function openDocumentModal(documentUrl, isGoogleDrive) {
            const documentModal = document.getElementById('documentModal');
            const documentIframe = document.getElementById('documentIframe');

            let contentUrl = documentUrl; // Almacenar el enlace original

            if (isGoogleDrive) {
                // Modificar la URL para que sea embebible
                const embedUrl = convertToEmbedUrl(documentUrl);
                if (!embedUrl) {
                    alert("No se puede visualizar este documento en el visor.");
                    return;
                }
                documentIframe.src = embedUrl;
            } else {
                const encodedUrl = encodeURIComponent(documentUrl);
                documentIframe.src = `https://docs.google.com/gview?url=${encodedUrl}&embedded=true`;
            }

            documentModal.style.display = 'block';
            documentModal.setAttribute('aria-hidden', 'false');

            // Almacenar el enlace en un atributo data
            documentModal.setAttribute('data-content-url', contentUrl);
        }

        // Función para cerrar el modal de documento
        function closeDocumentModal() {
            const documentModal = document.getElementById('documentModal');
            const documentIframe = document.getElementById('documentIframe');
            documentIframe.src = '';
            documentModal.style.display = 'none';
            documentModal.setAttribute('aria-hidden', 'true');
            documentModal.classList.remove('fullscreen');
        }

        // Función para convertir URLs de Google Drive a URLs embebibles
        function convertToEmbedUrl(url) {
            try {
                const parsedUrl = new URL(url);
                const hostname = parsedUrl.hostname;
                const pathname = parsedUrl.pathname;

                if (hostname.includes('docs.google.com')) {
                    // Google Docs, Sheets, Slides
                    if (pathname.includes('/document/')) {
                        return url.replace(/\/edit.*$/, '/preview');
                    } else if (pathname.includes('/spreadsheets/')) {
                        return url.replace(/\/edit.*$/, '/preview');
                    } else if (pathname.includes('/presentation/')) {
                        return url.replace(/\/edit.*$/, '/preview');
                    } else {
                        return null;
                    }
                } else if (hostname.includes('drive.google.com')) {
                    // Archivos en Google Drive
                    const fileIdMatch = url.match(/\/file\/d\/([a-zA-Z0-9_-]+)/);
                    if (fileIdMatch && fileIdMatch[1]) {
                        return `https://drive.google.com/file/d/${fileIdMatch[1]}/preview`;
                    } else {
                        return null;
                    }
                } else {
                    return null;
                }
            } catch (error) {
                return null;
            }
        }

        // Función para alternar pantalla completa en los modales
        function toggleFullscreen(modalId) {
            const modal = document.getElementById(modalId);
            modal.classList.toggle('fullscreen');

            // Cambiar el ícono de maximizar/restaurar
            const maximizeIcon = modal.querySelector('.maximize-modal i');
            if (modal.classList.contains('fullscreen')) {
                maximizeIcon.classList.remove('fa-expand');
                maximizeIcon.classList.add('fa-compress');
            } else {
                maximizeIcon.classList.remove('fa-compress');
                maximizeIcon.classList.add('fa-expand');
            }
        }

        // Funciones para abrir el enlace en una nueva pestaña
        function openVideoLink() {
            const videoModal = document.getElementById('videoModal');
            const contentUrl = videoModal.getAttribute('data-content-url');
            if (contentUrl) {
                window.open(contentUrl, '_blank');
            } else {
                alert('No se pudo obtener el enlace del video.');
            }
        }

        function openImageLink() {
            const imageModal = document.getElementById('imageModal');
            const contentUrl = imageModal.getAttribute('data-content-url');
            if (contentUrl) {
                window.open(contentUrl, '_blank');
            } else {
                alert('No se pudo obtener el enlace de la imagen.');
            }
        }

        function openDocumentLink() {
            const documentModal = document.getElementById('documentModal');
            const contentUrl = documentModal.getAttribute('data-content-url');
            if (contentUrl) {
                window.open(contentUrl, '_blank');
            } else {
                alert('No se pudo obtener el enlace del documento.');
            }
        }

        // Función para abrir el modal de configuración
        function openSettingsModal() {
            const settingsModal = document.getElementById('settingsModal');
            const enableDeletionCheckbox = document.getElementById('enableSectionDeletion');
            enableDeletionCheckbox.checked = enableSectionDeletion;
            settingsModal.style.display = 'block';
            settingsModal.setAttribute('aria-hidden', 'false');
        }

        // Función para cerrar el modal de configuración
        function closeSettingsModal() {
            const settingsModal = document.getElementById('settingsModal');
            const enableDeletionCheckbox = document.getElementById('enableSectionDeletion');
            enableSectionDeletion = enableDeletionCheckbox.checked;
            const dashboard = document.getElementById('dashboard');
            if (enableSectionDeletion) {
                dashboard.classList.add('enable-section-deletion');
            } else {
                dashboard.classList.remove('enable-section-deletion');
            }
            settingsModal.style.display = 'none';
            settingsModal.setAttribute('aria-hidden', 'true');
        }

        // Función para exportar el dashboard
        function exportDashboard() {
            const data = {
                sections: sectionsData,
                cards: cardsData
            };
            const dataStr = JSON.stringify(data, null, 2);
            const blob = new Blob([dataStr], { type: "application/json" });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'oficina_virtual.json';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        // Función para importar el dashboard
        function importDashboard(event) {
            const file = event.target.files[0];
            if (!file) {
                return;
            }
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const data = JSON.parse(e.target.result);
                    if (data.sections && data.cards) {
                        sectionsData = data.sections;
                        cardsData = data.cards;
                        localStorage.setItem('sections', JSON.stringify(sectionsData));
                        localStorage.setItem('cards', JSON.stringify(cardsData));
                        initializeSections();
                        loadCards();
                        alert('Oficina virtual restaurada correctamente.');
                        closeSettingsModal();
                    } else {
                        alert('El archivo JSON no es válido.');
                    }
                } catch (error) {
                    alert('Error al leer el archivo JSON.');
                }
            };
            reader.readAsText(file);
        }
    </script>
</body>
</html>
